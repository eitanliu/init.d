// copy to ~/.gradle/init.d/
import org.gradle.util.GradleVersion

Closure<Comparable> parseVersion = { String version ->
    try {
        return (Comparable) GradleVersion.version(version)
    } catch (Throwable ignored) {
    }
    return version
}

Closure handleAddRepo = { RepositoryHandler handler, URI repositoryUri, boolean enable, Project project, String tag = "all" ->
    if (enable && !handler.any { ArtifactRepository repo ->
        if (enable && repo instanceof MavenArtifactRepository) {
            return repositoryUri == repo.url
        } else return false
    }) {
        try {
            handler.maven { url = repositoryUri }
            println "repo_maven_add $project $tag: $repositoryUri."
        } catch (Throwable e) {
            println "repo_maven_error $project $tag: $repositoryUri."
            // e.printStackTrace()
        }
    }
}

def localRepoPath = [".m2", "repository"].join(File.separator)
def localRepoUri = new File(System.getProperty("user.home"), localRepoPath).toURI()

allprojects {
    def rootRepoUri = project.rootProject.layout.projectDirectory.file("repository").asFile.toURI()
    def projectRepoUri = project.layout.projectDirectory.file("repository").asFile.toURI()
    def localEnable = Boolean.valueOf(findProperty("repo_maven_local")?.toString() ?: "true")
    def rootEnable = Boolean.valueOf(findProperty("repo_maven_root")?.toString() ?: "false")
    def projectEnable = Boolean.valueOf(findProperty("repo_maven_project")?.toString() ?: "false")

    project.logger.lifecycle "$project repo_maven_local $localEnable"
    project.logger.lifecycle "$project repo_maven_root $rootEnable"
    project.logger.lifecycle "$project repo_maven_project $projectEnable"

    handleAddRepo(repositories, localRepoUri, localEnable, project, "all")
    handleAddRepo(repositories, rootRepoUri, rootEnable, project, "all")
    handleAddRepo(repositories, projectRepoUri, projectEnable, project, "all")

    buildscript {

        handleAddRepo(repositories, localRepoUri, localEnable, project, "buildscript")
        handleAddRepo(repositories, rootRepoUri, rootEnable, project, "buildscript")
        handleAddRepo(repositories, projectRepoUri, projectEnable, project, "buildscript")
    }
}

gradle.beforeSettings { Settings settings ->
    // println "beforeSettings ${settings.properties}"
    def rootRepoUri = new File(settings.rootProject.projectDir, ["repository"].join(File.separator)).toURI()

    def localEnable = Boolean.valueOf(settings.properties.getOrDefault("repo_maven_local", "true") as String)
    def rootEnable = Boolean.valueOf(settings.properties.getOrDefault("repo_maven_root", "false") as String)
    def pluginRepositories = settings.pluginManagement.repositories
    handleAddRepo(pluginRepositories, localRepoUri, localEnable, null, "pluginManagement")
    handleAddRepo(pluginRepositories, rootRepoUri, rootEnable, null, "pluginManagement")

    // dependencyResolutionManagement.repositories
    if (parseVersion(gradle.gradleVersion) >= parseVersion("6.8")) {
        def getMethod = settings.class.getDeclaredMethod("getDependencyResolutionManagement")
        def dependencyResolutionManagement = getMethod.invoke(settings)
        def repositoriesMethod = dependencyResolutionManagement.class.getDeclaredMethod("getRepositories")
        def repositories = repositoriesMethod.invoke(dependencyResolutionManagement) as RepositoryHandler
        handleAddRepo(repositories, localRepoUri, localEnable, null, "dependencyResolutionManagement")
        handleAddRepo(repositories, rootRepoUri, rootEnable, null, "dependencyResolutionManagement")
    }
}
